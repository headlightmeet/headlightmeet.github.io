import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as i,d as o}from"./app-DeYunnnJ.js";const n={},l=o('<h1 id="父子组件通信" tabindex="-1"><a class="header-anchor" href="#父子组件通信"><span>父子组件通信</span></a></h1><p>父子组件通信</p><ul><li>父组件向子组件传递数据(Props) (pra 破丝):只能父组件向子组件传递，不能反向</li><li>子组件向父组件传递数据（自定义事件） <ul><li>子组件通过 <code>$emit</code> 触发事件，父组件通过 v-on 监听事件并处理数据。</li><li>这是一种典型的“子到父”通信方式 兄弟组件通信</li></ul></li><li>使用事件总线（Event Bus） <ul><li>组件通过 <code>$on</code> 和 <code>$emit</code> 进行通信</li></ul></li><li>跨层级组件通信 <ul><li>使用 Provide(破儿外的) / Inject(因解克特) 祖先组件通过 provide 提供数据，后代组件通过 inject 注入数据。</li></ul></li></ul>',3),r=[l];function c(a,p){return i(),t("div",null,r)}const s=e(n,[["render",c],["__file","3、父字组件通信.html.vue"]]),u=JSON.parse('{"path":"/%E7%9F%A5%E8%AF%86%E5%BA%93/vue2/3%E3%80%81%E7%88%B6%E5%AD%97%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1.html","title":"父子组件通信","lang":"zh-CN","frontmatter":{"title":"父子组件通信","order":3,"description":"父子组件通信 父子组件通信 父组件向子组件传递数据(Props) (pra 破丝):只能父组件向子组件传递，不能反向 子组件向父组件传递数据（自定义事件） 子组件通过 $emit 触发事件，父组件通过 v-on 监听事件并处理数据。 这是一种典型的“子到父”通信方式 兄弟组件通信 使用事件总线（Event Bus） 组件通过 $on 和 $emit 进...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%9F%A5%E8%AF%86%E5%BA%93/vue2/3%E3%80%81%E7%88%B6%E5%AD%97%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1.html"}],["meta",{"property":"og:site_name","content":"向前有光的博客"}],["meta",{"property":"og:title","content":"父子组件通信"}],["meta",{"property":"og:description","content":"父子组件通信 父子组件通信 父组件向子组件传递数据(Props) (pra 破丝):只能父组件向子组件传递，不能反向 子组件向父组件传递数据（自定义事件） 子组件通过 $emit 触发事件，父组件通过 v-on 监听事件并处理数据。 这是一种典型的“子到父”通信方式 兄弟组件通信 使用事件总线（Event Bus） 组件通过 $on 和 $emit 进..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-03T07:46:09.000Z"}],["meta",{"property":"article:author","content":"Mr.Liu"}],["meta",{"property":"article:modified_time","content":"2025-03-03T07:46:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"父子组件通信\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-03T07:46:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Liu\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1720591787000,"updatedTime":1740987969000,"contributors":[{"name":"jitems","email":"3119125794@qq.com","commits":1}]},"readingTime":{"minutes":0.58,"words":174},"filePathRelative":"知识库/vue2/3、父字组件通信.md","localizedDate":"2024年7月10日","excerpt":"\\n<p>父子组件通信</p>\\n<ul>\\n<li>父组件向子组件传递数据(Props) (pra 破丝):只能父组件向子组件传递，不能反向</li>\\n<li>子组件向父组件传递数据（自定义事件）\\n<ul>\\n<li>子组件通过 <code>$emit</code> 触发事件，父组件通过 v-on 监听事件并处理数据。</li>\\n<li>这是一种典型的“子到父”通信方式\\n兄弟组件通信</li>\\n</ul>\\n</li>\\n<li>使用事件总线（Event Bus）\\n<ul>\\n<li>组件通过 <code>$on</code> 和 <code>$emit</code> 进行通信</li>\\n</ul>\\n</li>\\n<li>跨层级组件通信\\n<ul>\\n<li>使用 Provide(破儿外的) / Inject(因解克特) 祖先组件通过 provide 提供数据，后代组件通过 inject 注入数据。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{s as comp,u as data};
