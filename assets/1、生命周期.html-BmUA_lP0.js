import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as s,a as n,d as a,o as t}from"./app-dUal_Ljz.js";const r={},l=n("p",null," ",-1),d=a(`<h1 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h1><h2 id="什么是生命周期" tabindex="-1"><a class="header-anchor" href="#什么是生命周期"><span>什么是生命周期</span></a></h2><p>Vue 是组件化编程，从一个组件诞生到消亡，会经历很多过程，这些过程就叫做生命周期。 你理解了什么是生命周期，你还了解一个概念“钩子函数”。 钩子函数： 伴随着生命周期，给用户使用的函数，操控生命周期，主要是操控钩子函数。</p><h2 id="vue3-的生命周期" tabindex="-1"><a class="header-anchor" href="#vue3-的生命周期"><span>Vue3 的生命周期</span></a></h2><ul><li>setup() :开始创建组件之前，在beforeCreate和created之前执行。创建的是data和method</li><li>onBeforeMount() : 组件挂载到节点上之前执行的函数。</li><li>onMounted() : 组件挂载完成后执行的函数。</li><li>onBeforeUpdate(): 组件更新之前执行的函数。</li><li>onUpdated(): 组件更新完成之后执行的函数。</li><li>onBeforeUnmount(): 组件卸载之前执行的函数。</li><li>onUnmounted(): 组件卸载完成后执行的函数</li><li>onActivated(): 被包含在中的组件，会多出两个生命周期钩子函数。被激活时执行。 (keep-alive 钩子)</li><li>onDeactivated(): 比如从 A 组件，切换到 B 组件，A 组件消失时执行。(keep-alive钩子)</li><li>onErrorCaptured(): 当捕获一个来自子孙组件的异常时激活钩子函数（以后用到再讲，不好展现）。</li></ul><h2 id="vue2-和vue3-生命周期对比" tabindex="-1"><a class="header-anchor" href="#vue2-和vue3-生命周期对比"><span>vue2 和vue3 生命周期对比</span></a></h2><p>那我到底是使用Vue2.x还是Vue3.x的生命周期钩子函数？其实这个无所谓，但是不愿混用，如果你用 setup 这种Vue3的生命周期函数，就不要再使用Vue2的了。为了你更好的掌握，我作了一个函数对比：</p><div class="language-vue line-numbers-mode" data-highlighter="shiki" data-ext="vue" data-title="vue" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">Vue2--------------vue3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">beforeCreate -&gt; setup()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">created -&gt; setup()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">beforeMount -&gt; onBeforeMount</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">mounted -&gt; onMounted</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">beforeUpdate -&gt; onBeforeUpdate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">updated -&gt; onUpdated</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">beforeDestroy -&gt; onBeforeUnmount</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">destroyed -&gt; onUnmounted</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">activated -&gt; onActivated</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">deactivated -&gt; onDeactivated</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">errorCaptured -&gt; onErrorCaptured</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="onrendertracked-状态跟踪" tabindex="-1"><a class="header-anchor" href="#onrendertracked-状态跟踪"><span>onRenderTracked 状态跟踪</span></a></h2><p><strong>onRenderTracked</strong>直译过来就是状态跟踪，它会跟踪页面上所有响应式变量和方法的状态，也就是我们用return返回去的值，它都会跟踪。只要页面有update的情况，它就会跟踪，然后生成一个event对象，我们通过event对象来查找程序的问题所在。</p><p>使用<strong>onRenderTracked</strong>同样要使用import进行引入。</p><div class="language-vue line-numbers-mode" data-highlighter="shiki" data-ext="vue" data-title="vue" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">import { .... ,onRenderTracked,} from &quot;vue&quot;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>引用后就可以在setup()函数中进行引用了。</p><div class="language-vue line-numbers-mode" data-highlighter="shiki" data-ext="vue" data-title="vue" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">onRenderTracked((event) =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    console.log(&quot;状态跟踪组件-----------&gt;&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    console.log(event);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写完后可以到终端中启动测试服务npm run serve，然后看一下效果，在组件没有更新的时候<strong>onRenderTracked</strong>是不会执行的，组件更新时，它会跟组里边每个值和方法的变化。</p><h2 id="onrendertriggered-状态触发" tabindex="-1"><a class="header-anchor" href="#onrendertriggered-状态触发"><span>onRenderTriggered 状态触发</span></a></h2><p><strong>onRenderTriggered</strong>直译过来是状态触发，它不会跟踪每一个值，而是给你变化值的信息，并且新值和旧值都会给你明确的展示出来。</p><p>如果把<strong>onRenderTracked</strong>比喻成散弹枪，每个值都进行跟踪，那<strong>onRenderTriggered</strong>就是狙击枪，只精确跟踪发生变化的值，进行针对性调试。</p><p>使用它同样要先用import进行引入</p><div class="language-vue line-numbers-mode" data-highlighter="shiki" data-ext="vue" data-title="vue" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">import { .... ,onRenderTriggered,} from &quot;vue&quot;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在使用<strong>onRenderTriggered</strong>前，记得注释相应的<strong>onRenderTracked</strong>代码，这样看起来会直观很多。 然后把<strong>onRenderTriggered</strong>()函数，写在setup()函数里边。</p><div class="language-vue line-numbers-mode" data-highlighter="shiki" data-ext="vue" data-title="vue" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">onRenderTriggered((event) =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    console.log(&quot;状态触发组件---------------&gt;&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    console.log(event);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对 event 对象属性的详细介绍：</p><div class="language-vue line-numbers-mode" data-highlighter="shiki" data-ext="vue" data-title="vue" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">- key 那边变量发生了变化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">- newValue 更新后变量的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">- oldValue 更新前变量的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">- target 目前页面中的响应变量和函数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24);function h(o,p){return t(),i("div",null,[l,s(" more "),d])}const g=e(r,[["render",h],["__file","1、生命周期.html.vue"]]),k=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF/vue3%E6%95%99%E7%A8%8B/1%E3%80%81%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html","title":"生命周期","lang":"zh-CN","frontmatter":{"title":"生命周期","order":1,"category":["前端"],"tag":["vue3"],"head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E5%89%8D%E7%AB%AF/vue3%E6%95%99%E7%A8%8B/1%E3%80%81%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html"}],["meta",{"property":"og:site_name","content":"暖阳的博客"}],["meta",{"property":"og:title","content":"生命周期"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-28T08:03:12.000Z"}],["meta",{"property":"article:author","content":"Mr.Liu"}],["meta",{"property":"article:tag","content":"vue3"}],["meta",{"property":"article:modified_time","content":"2024-08-28T08:03:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"生命周期\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-28T08:03:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Liu\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"什么是生命周期","slug":"什么是生命周期","link":"#什么是生命周期","children":[]},{"level":2,"title":"Vue3 的生命周期","slug":"vue3-的生命周期","link":"#vue3-的生命周期","children":[]},{"level":2,"title":"vue2 和vue3 生命周期对比","slug":"vue2-和vue3-生命周期对比","link":"#vue2-和vue3-生命周期对比","children":[]},{"level":2,"title":"onRenderTracked 状态跟踪","slug":"onrendertracked-状态跟踪","link":"#onrendertracked-状态跟踪","children":[]},{"level":2,"title":"onRenderTriggered 状态触发","slug":"onrendertriggered-状态触发","link":"#onrendertriggered-状态触发","children":[]}],"git":{"createdTime":1724663003000,"updatedTime":1724832192000,"contributors":[{"name":"test","email":"email","commits":2}]},"readingTime":{"minutes":2.81,"words":842},"filePathRelative":"前端/vue3教程/1、生命周期.md","localizedDate":"2024年8月26日","excerpt":"<p>&nbsp;</p>\\n"}');export{g as comp,k as data};
